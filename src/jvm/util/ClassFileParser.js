/*
  The ClassFile structure from JVM spec version 8:
  https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.1
  */

const ClassFile = [
    {name: 'magic', size: 4},
    {name: 'minor_version', size: 2},
    {name: 'major_version', size: 2},
    {name: 'constant_pool_count', size: 2},
    {name: 'constant_pool', size: 'constant_pool_count', type: 'cp_info'},
    {name: 'access_flags', size: 2},
    {name: 'this_class', size: 2},
    {name: 'super_class', size: 2},
    {name: 'interfaces_count', size: 2},
    {name: 'interfaces', size: 'interfaces_count', type: 'u2'},
    {name: 'fields_count', size: 2},
    {name: 'fields', size: 'fields_count', type: 'field_info'},
    {name: 'methods_count', size: 2},
    {name: 'methods', size: 'methods_count', type: 'method_info'},
    {name: 'attributes_count', size: 2},
    {name: 'attributes', size: 'attributes_count', type: 'attribute_info'}
];



const bytesToInt = (byteArray) => {
    var sum = 0;
    var n = byteArray.length;
    const b = 8;
    for(var i = n-1; n > 0; i--) {
        sum += (b << i) * byteArray[i];
    }
    return sum;
};

const ClassFileParser = (classFileBytes) => {
    const parsedFields = Array(ClassFile.length);
    // Loop over every field of the struct ClassFile
    var currentByte = 0;
    for(var f = 0; f < ClassFile.length; f++) {
        var b_max = ClassFile[f].size;
        if(typeof b_max != 'string') {
            var byteArray = Array(b_max);
            for(var i = 0; i < b_max; i++) {
                byteArray[i] = addTwoJavaClassByteCode[currentByte + i];
            }
            parsedFields[f] = bytesToInt(byteArray);
            currentByte += b_max;
        } else {
            b_max = parsedFields[f-1]; // array of bytes to be converted to int
        }
    }
    console.log(parsedFields);
};

const addTwoJavaClassByteCode = [
    0xca, 0xfe, 0xba, 0xbe, 0x00, 0x00, 0x00, 0x34, 0x00, 0x14, 0x0a, 0x00,
    0x05, 0x00, 0x10, 0x07, 0x00, 0x11, 0x0a, 0x00, 0x02, 0x00, 0x10, 0x0a,
    0x00, 0x02, 0x00, 0x12, 0x07, 0x00, 0x13, 0x01, 0x00, 0x06, 0x3c, 0x69,
    0x6e, 0x69, 0x74, 0x3e, 0x01, 0x00, 0x03, 0x28, 0x29, 0x56, 0x01, 0x00,
    0x04, 0x43, 0x6f, 0x64, 0x65, 0x01, 0x00, 0x0f, 0x4c, 0x69, 0x6e, 0x65,
    0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x01,
    0x00, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x01, 0x00, 0x16, 0x28, 0x5b, 0x4c,
    0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74,
    0x72, 0x69, 0x6e, 0x67, 0x3b, 0x29, 0x56, 0x01, 0x00, 0x06, 0x61, 0x64,
    0x64, 0x54, 0x77, 0x6f, 0x01, 0x00, 0x05, 0x28, 0x49, 0x49, 0x29, 0x49,
    0x01, 0x00, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c,
    0x65, 0x01, 0x00, 0x0b, 0x41, 0x64, 0x64, 0x54, 0x77, 0x6f, 0x2e, 0x6a,
    0x61, 0x76, 0x61, 0x0c, 0x00, 0x06, 0x00, 0x07, 0x01, 0x00, 0x06, 0x41,
    0x64, 0x64, 0x54, 0x77, 0x6f, 0x0c, 0x00, 0x0c, 0x00, 0x0d, 0x01, 0x00,
    0x10, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f,
    0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x21, 0x00, 0x02, 0x00, 0x05, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x00, 0x06, 0x00, 0x07, 0x00,
    0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x01, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x05, 0x2a, 0xb7, 0x00, 0x01, 0xb1, 0x00, 0x00, 0x00, 0x01,
    0x00, 0x09, 0x00, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
    0x00, 0x09, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00,
    0x00, 0x3d, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0x15, 0x05, 0x3c,
    0x06, 0x3d, 0xbb, 0x00, 0x02, 0x59, 0xb7, 0x00, 0x03, 0x4e, 0x2d, 0x1b,
    0x1c, 0xb6, 0x00, 0x04, 0x36, 0x04, 0xb1, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x09, 0x00, 0x00, 0x00, 0x16, 0x00, 0x05, 0x00, 0x00, 0x00, 0x03, 0x00,
    0x02, 0x00, 0x04, 0x00, 0x04, 0x00, 0x05, 0x00, 0x0c, 0x00, 0x06, 0x00,
    0x14, 0x00, 0x07, 0x00, 0x01, 0x00, 0x0c, 0x00, 0x0d, 0x00, 0x01, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00, 0x00,
    0x04, 0x1b, 0x1c, 0x60, 0xac, 0x00, 0x00, 0x00, 0x01, 0x00, 0x09, 0x00,
    0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x01, 0x00,
    0x0e, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0f
];

ClassFileParser(addTwoJavaClassByteCode);
